from snakemake.utils import min_version
min_version("8.0")

import os
from glob import glob
import yaml
import json

configfile: "../config/config.yaml"
SAMPLES, = glob_wildcards(os.path.join(config["reads"],config["fastq_names_1"]))

dir = dict()

# system directories
dir["base"] = os.path.join(workflow.basedir, "..")
dir["env"] = os.path.join(workflow.basedir, "envs")
dir["scripts"] = os.path.join(workflow.basedir, "..", "scripts")
dir["db"] = os.path.join(workflow.basedir, "databases")

# output directories
dir["out"] = config["output"]

# misc output directories
dir["temp"] = os.path.join(dir["out"], "temp")
dir["results"] = os.path.join(dir["out"], "results")
dir["logs"] = os.path.join(dir["out"], "logs")
dir["reports"] = os.path.join(dir["out"], "reports")
dir["bench"] = os.path.join(dir["out"], "benchmarks")
dir["output"] = os.path.join(dir["results"], "output")
dir["stats"] = os.path.join(dir["results"], "stats")

include: "rules/check_fastq.smk"
include: "rules/preprocessing.smk"
include: "rules/mask_host_genome.smk"
include: "rules/assembly.smk"
#include: "rules/host_removal.smk"

rule check_host_removed_reads:
    """Check if host-removed read pairs have equal counts"""
    input:
        expand(os.path.join(dir["output"], "host_removed", "{sample}_hr_R1.fastq.gz"), sample=SAMPLES),
        expand(os.path.join(dir["output"], "host_removed", "{sample}_hr_R2.fastq.gz"), sample=SAMPLES)
    output:
        os.path.join(dir["stats"], "qc", "host_removed_read_counts.tsv")
    conda:
        os.path.join(dir["env"], "pandas.yaml")
    shell:
        """
        python {workflow.basedir}/scripts/check_read_pairs.py \
            --input-dir {os.path.join(dir["output"], "host_removed")} \
            --r1-pattern "*_hr_R1.fastq.gz" \
            --r2-pattern "*_hr_R2.fastq.gz" \
            --output {output} \
            --stage "host_removal"
        """

rule check_unmerged_reads:
    """Check if unmerged read pairs have equal counts"""
    input:
        expand(os.path.join(dir["output"], "bbmerge", "{sample}_R1_unmerged.fastq.gz"), sample=SAMPLES),
        expand(os.path.join(dir["output"], "bbmerge", "{sample}_R2_unmerged.fastq.gz"), sample=SAMPLES)
    output:
        os.path.join(dir["stats"], "qc", "unmerged_read_counts.tsv")
    conda:
        os.path.join(dir["env"], "pandas.yaml")
    shell:
        """
        python {workflow.basedir}/scripts/check_read_pairs.py \
            --input-dir {os.path.join(dir["output"], "bbmerge")} \
            --r1-pattern "*_R1_unmerged.fastq.gz" \
            --r2-pattern "*_R2_unmerged.fastq.gz" \
            --output {output} \
            --stage "bbmerge_unmerged"
        """

rule all:
    input:
        #expand(os.path.join(dir["output"],"{sample}_R2.fastq.gz"), sample = SAMPLES),
        os.path.join(dir["stats"], "raw_input_data", "basic_stats.txt"),
        #os.path.join(dir["stats"], "raw_input_data", "multiqc_report.html"),
        #expand(os.path.join(dir["output"], "fastp", "{sample}_R2_trimmed.fastq.gz"), sample = SAMPLES),
        os.path.join(dir["stats"], "qc", "fastp_stats.tsv"),
        os.path.join(dir["stats"], "qc", "primer_b_stats.tsv"),
        os.path.join(dir["stats"], "qc", "vector_stats.tsv"),
        os.path.join(dir["stats"], "qc", "host_removal_stats.tsv"),
        os.path.join(dir["stats"], "qc", "host_removed_read_counts.tsv"),
        os.path.join(dir["stats"], "qc", "bbmerge_stats.tsv"),
        os.path.join(dir["stats"], "qc", "unmerged_read_counts.tsv"),
        os.path.join(dir["stats"], "qc", "preprocessing_plots.html"),
        #expand(os.path.join(dir["stats"], "rm_vector_contamination", "{sample}_rm_vc.stats"), sample = SAMPLES),
        expand(os.path.join(dir["output"], "bbmerge", "{sample}_merged.fastq.gz"), sample = SAMPLES),
        os.path.join(dir["logs"], "assembly", "read_count_verification.txt"),
        os.path.join(dir["stats"], "assembly", "assembly_stats.txt"),
    default_target: True
