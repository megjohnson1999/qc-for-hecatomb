from snakemake.utils import min_version
min_version("8.0")

import os
from glob import glob
import yaml
import json

configfile: "../config/config.yaml"
SAMPLES, = glob_wildcards(os.path.join(config["reads"],config["fastq_names_1"]))

dir = dict()

# system directories
dir["base"] = os.path.join(workflow.basedir, "..")
dir["env"] = os.path.join(workflow.basedir, "envs")
dir["scripts"] = os.path.join(workflow.basedir, "..", "scripts")
dir["db"] = os.path.join(workflow.basedir, "databases")

# output directories
dir["out"] = config["output"]

# misc output directories
dir["temp"] = os.path.join(dir["out"], "temp")
dir["results"] = os.path.join(dir["out"], "results")
dir["logs"] = os.path.join(dir["out"], "logs")
dir["reports"] = os.path.join(dir["out"], "reports")
dir["bench"] = os.path.join(dir["out"], "benchmarks")
dir["output"] = os.path.join(dir["results"], "output")
dir["stats"] = os.path.join(dir["results"], "stats")

include: "rules/check_fastq.smk"
include: "rules/preprocessing.smk"
include: "rules/mask_host_genome.smk"
include: "rules/assembly.smk"
include: "rules/contig_validation.smk"
#include: "rules/host_removal.smk"

def get_assembly_inputs(wildcards):
    inputs = [
        os.path.join(dir["stats"], "raw_input_data", "basic_stats.txt"),
        os.path.join(dir["stats"], "qc", "fastp_stats.tsv"),
        os.path.join(dir["stats"], "qc", "primer_b_stats.tsv"),
        os.path.join(dir["stats"], "qc", "vector_stats.tsv"),
        os.path.join(dir["stats"], "qc", "host_removal_stats.tsv"),
        os.path.join(dir["stats"], "qc", "preprocessing_plots.html"),
        os.path.join(dir["stats"], "assembly", "assembly_stats.txt"),
        os.path.join(dir["stats"], "contig_validation", "contig_validation_summary.txt"),
        os.path.join(dir["output"], "host_removed", "merged.pileup")
    ]
    
    # Add strategy-specific inputs as strings, not functions
    if config.get("assembly_strategy", "coassembly") == "coassembly":
        # For coassembly, we need the MEGAHIT output
        inputs.append(os.path.join(dir["output"], "assembly", "megahit", "final.contigs.fa"))
    else:
        # For individual assembly, we need all per-sample assemblies and the merged Flye assembly
        # Add per-sample assemblies individually 
        for sample in SAMPLES:
            inputs.append(os.path.join(dir["output"], "assembly", "per_sample", sample, "final.contigs.fa"))
        # Add the merged Flye assembly
        inputs.append(os.path.join(dir["output"], "assembly", "flye", "assembly.fasta"))
        
    return inputs

rule all:
    input:
        get_assembly_inputs
    default_target: True
